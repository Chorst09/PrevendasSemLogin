"use client";

import React, { useState, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Upload, FileText, Brain, Target, Award, CheckCircle, Loader2, Save, Printer, AlertTriangle, TrendingUp, Clock, DollarSign } from 'lucide-react';

interface AnalysisType {
  id: string;
  title: string;
  description: string;
  icon: React.ReactNode;
}

interface AnalysisResult {
  id: string;
  fileName: string;
  analysisType: string;
  analysisDate: string;
  summary: string;
  keyPoints: string[];
  requirements: string[];
  deadlines: string[];
  values: string[];
  risks: string[];
  opportunities: string[];
  recommendations: string[];
  confidence: number;
  processingTime: number;
  products?: ProductItem[];
}

interface ProductItem {
  item: string;
  description: string;
  quantity: number;
  unit: string;
  estimatedValue: number;
  specifications: string[];
  category?: string;
  priority?: 'Cr√≠tico' | 'Importante' | 'Desej√°vel';
  complianceLevel?: 'Total' | 'Parcial' | 'N√£o Atende';
  riskLevel?: 'Baixo' | 'M√©dio' | 'Alto';
  technicalJustification?: string;
  marketAnalysis?: string;
  alternativeOptions?: string[];
  suggestedModels?: SuggestedModel[];
}

interface SuggestedModel {
  brand: string;
  model: string;
  partNumber?: string;
  estimatedPrice: number;
  availability: 'Dispon√≠vel' | 'Sob Consulta' | 'Descontinuado';
  complianceScore: number;
  advantages: string[];
  disadvantages?: string[];
  distributors?: string[];
}

interface DocumentRequirement {
  type: string;
  description: string;
  mandatory: boolean;
  deadline?: string;
  notes?: string;
}

const EditalAnalyzer: React.FC = () => {
  const
    [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [selectedAnalysisType, setSelectedAnalysisType] = useState<string>('geral');
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [isDragOver, setIsDragOver] = useState(false);
  const [analysisResult, setAnalysisResult] = useState<AnalysisResult | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const resultRef = useRef<HTMLDivElement>(null);

  const analysisTypes: AnalysisType[] = [
    {
      id: 'geral',
      title: 'An√°lise Geral',
      description: 'Extrai dados chave do edital.',
      icon: <Target className="h-6 w-6" />
    },
    {
      id: 'tdr',
      title: 'Termo de Refer√™ncia',
      description: 'Resume itens e especifica√ß√µes.',
      icon: <FileText className="h-6 w-6" />
    },
    {
      id: 'documentacao',
      title: 'Documenta√ß√£o',
      description: 'Extrai docs de habilita√ß√£o (IA).',
      icon: <CheckCircle className="h-6 w-6" />
    },
    {
      id: 'produtos',
      title: 'An√°lise de Produtos',
      description: 'Extrai itens e sugere equipamentos.',
      icon: <Award className="h-6 w-6" />
    }
  ];

  const handleFileSelect = (file: File) => {
    if (file.type === 'application/pdf' ||
      file.name.endsWith('.docx') ||
      file.name.endsWith('.doc')) {
      setSelectedFile(file);
    } else {
      alert('Por favor, selecione um arquivo PDF ou DOCX v√°lido.');
    }
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(true);
  };

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);
    const files = e.dataTransfer.files;
    if (files.length > 0) {
      handleFileSelect(files[0]);
    }
  };

  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      handleFileSelect(file);
    }
  };
  // Extra√ß√£o de texto de PDF usando PDF.js
  const extractTextFromPDF = async (file: File): Promise<string> => {
    try {
      console.log(`üîç Iniciando extra√ß√£o de PDF: ${file.name}`);
      const arrayBuffer = await file.arrayBuffer();
      const pdfjsLib = await import('pdfjs-dist');

      // Configurar worker localmente para evitar problemas de CDN
      if (typeof window !== 'undefined') {
        pdfjsLib.GlobalWorkerOptions.workerSrc = '/pdf.worker.min.js';
      }

      const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;
      console.log(`üìÑ PDF carregado: ${pdf.numPages} p√°ginas`);

      let fullText = '';
      for (let pageNum = 1; pageNum <= pdf.numPages; pageNum++) {
        try {
          const page = await pdf.getPage(pageNum);
          const textContent = await page.getTextContent();
          let pageText = '';
          textContent.items.forEach((item: any) => {
            if (item.str && item.str.trim()) {
              pageText += item.str + ' ';
            }
          });
          if (pageText.trim()) {
            fullText += `\n--- P√ÅGINA ${pageNum} ---\n${pageText}\n`;
          }
        } catch (pageError) {
          console.warn(`‚ö†Ô∏è Erro na p√°gina ${pageNum}:`, pageError);
        }
      }

      fullText = fullText.replace(/\s+/g, ' ').replace(/\n\s*\n/g, '\n').trim();
      console.log(`‚úÖ Extra√ß√£o PDF conclu√≠da: ${fullText.length} caracteres`);
      console.log(`üìù Primeiros 500 caracteres:`, fullText.substring(0, 500));

      if (fullText.length < 100) {
        throw new Error('PDF pode ser digitalizado ou protegido');
      }
      return fullText;
    } catch (error) {
      console.error('‚ùå Erro na extra√ß√£o de PDF:', error);
      return `ERRO NA EXTRA√á√ÉO DO PDF: ${file.name}\n\nEste PDF n√£o p√¥de ser processado automaticamente.\nPoss√≠veis causas:\n‚Ä¢ PDF digitalizado (imagem)\n‚Ä¢ PDF protegido por senha\n‚Ä¢ PDF corrompido\n\nSUGEST√ïES:\n1. Use um PDF com texto selecion√°vel\n2. Remova prote√ß√µes se houver\n3. Converta para uma vers√£o mais recente`;
    }
  };

  // Extra√ß√£o de texto de DOCX usando mammoth
  const extractTextFromDOCX = async (file: File): Promise<string> => {
    try {
      console.log(`üìù Iniciando extra√ß√£o de DOCX: ${file.name}`);
      const arrayBuffer = await file.arrayBuffer();
      const mammoth = await import('mammoth');
      const result = await mammoth.extractRawText({ arrayBuffer });

      let extractedText = result.value || '';
      extractedText = extractedText.replace(/\r\n/g, '\n').replace(/\r/g, '\n').replace(/\n\s*\n/g, '\n').replace(/\s+/g, ' ').trim();
      console.log(`‚úÖ Extra√ß√£o DOCX conclu√≠da: ${extractedText.length} caracteres`);

      if (extractedText.length < 50) {
        throw new Error('Documento vazio ou com pouco conte√∫do');
      }
      return extractedText;
    } catch (error) {
      console.error('‚ùå Erro na extra√ß√£o de DOCX:', error);
      return `ERRO NA EXTRA√á√ÉO DO DOCUMENTO: ${file.name}\n\nEste documento n√£o p√¥de ser processado.\nPoss√≠veis causas:\n‚Ä¢ Documento corrompido\n‚Ä¢ Formato muito antigo\n‚Ä¢ Documento protegido\n\nSUGEST√ïES:\n1. Salve como .docx\n2. Remova prote√ß√µes\n3. Verifique se n√£o est√° corrompido`;
    }
  };

  // Fun√ß√£o principal de extra√ß√£o de texto
  const extractTextFromFile = async (file: File): Promise<string> => {
    console.log(`üöÄ Iniciando extra√ß√£o: ${file.name} (${(file.size / 1024 / 1024).toFixed(2)} MB)`);

    try {
      let extractedText = '';

      if (file.type === 'application/pdf') {
        extractedText = await extractTextFromPDF(file);
      } else if (file.name.endsWith('.docx')) {
        extractedText = await extractTextFromDOCX(file);
      } else if (file.name.endsWith('.doc')) {
        try {
          extractedText = await extractTextFromDOCX(file);
        } catch {
          throw new Error('Formato .doc n√£o suportado - converta para .docx');
        }
      } else if (file.type === 'text/plain' || file.name.endsWith('.txt')) {
        // Suporte para arquivos de texto simples
        extractedText = await file.text();
        console.log(`‚úÖ Extra√ß√£o de texto simples: ${extractedText.length} caracteres`);
      } else {
        throw new Error('Formato n√£o suportado. Use PDF, DOCX ou TXT.');
      }

      if (extractedText.length < 50) {
        throw new Error('Texto extra√≠do insuficiente para an√°lise');
      }

      console.log(`‚úÖ Extra√ß√£o conclu√≠da: ${extractedText.length} caracteres`);
      console.log(`üìù Primeiros 200 caracteres:`, extractedText.substring(0, 200));
      return extractedText;
    } catch (error) {
      console.error('‚ùå Falha na extra√ß√£o:', error);
      throw error;
    }
  };

  // Extra√ß√£o inteligente de documentos necess√°rios
  const extractDocuments = (text: string): DocumentRequirement[] => {
    const documents: DocumentRequirement[] = [];
    const textLower = text.toLowerCase();

    console.log('üîç Iniciando extra√ß√£o de documentos...');

    // Padr√µes para identificar se√ß√µes de documenta√ß√£o
    const docSectionPatterns = [
      /(?:documenta√ß√£o|documentos?)\s+(?:necess√°ria?s?|exigida?s?|obrigat√≥ria?s?)/gi,
      /(?:habilita√ß√£o|qualifica√ß√£o)\s+(?:jur√≠dica|t√©cnica|econ√¥mica)/gi,
      /(?:regularidade|certid√µes?)\s+(?:fiscal|trabalhista)/gi,
      /(?:anexos?|documentos?)\s+(?:para|de)\s+(?:habilita√ß√£o|participa√ß√£o)/gi,
      /(?:comprova√ß√£o|comprovantes?)\s+(?:de|da)/gi
    ];

    // Encontrar se√ß√µes de documenta√ß√£o
    let docSections: string[] = [];
    docSectionPatterns.forEach(pattern => {
      let match;
      while ((match = pattern.exec(text)) !== null) {
        const startIndex = Math.max(0, match.index - 300);
        const endIndex = Math.min(text.length, match.index + 3000);
        docSections.push(text.substring(startIndex, endIndex));
      }
    });

    // Se n√£o encontrou se√ß√µes espec√≠ficas, buscar em todo o texto
    if (docSections.length === 0) {
      docSections = [text];
    }

    // Documentos padr√£o com padr√µes de busca melhorados
    const standardDocs = [
      {
        patterns: [/ato\s+constitutivo/gi, /contrato\s+social/gi, /estatuto/gi, /requerimento\s+de\s+empres√°rio/gi],
        doc: {
          type: "Habilita√ß√£o Jur√≠dica",
          description: "Contrato social, estatuto ou ato constitutivo da empresa devidamente registrado",
          mandatory: true,
          deadline: "Documento deve estar vigente",
          notes: "Para sociedades por a√ß√µes, incluir ata de elei√ß√£o da diretoria atual"
        }
      },
      {
        patterns: [/procura√ß√£o/gi, /representa√ß√£o\s+legal/gi, /mandato/gi],
        doc: {
          type: "Habilita√ß√£o Jur√≠dica",
          description: "Procura√ß√£o para representa√ß√£o legal nos atos da licita√ß√£o",
          mandatory: false,
          deadline: "V√°lida por 1 ano da data de emiss√£o",
          notes: "Necess√°ria apenas se representado por procurador"
        }
      },
      {
        patterns: [/cnd\s+federal/gi, /certid√£o.*federal/gi, /tributos\s+federais/gi, /receita\s+federal/gi],
        doc: {
          type: "Regularidade Fiscal",
          description: "Certid√£o Negativa de D√©bitos Relativos aos Tributos Federais e √† D√≠vida Ativa da Uni√£o",
          mandatory: true,
          deadline: "M√°ximo 90 dias da data de emiss√£o",
          notes: "Pode ser positiva com efeitos de negativa"
        }
      },
      {
        patterns: [/cnd\s+estadual/gi, /certid√£o.*estadual/gi, /icms/gi, /fazenda\s+estadual/gi],
        doc: {
          type: "Regularidade Fiscal",
          description: "Certid√£o Negativa de D√©bitos Estaduais (ICMS)",
          mandatory: true,
          deadline: "M√°ximo 90 dias da data de emiss√£o"
        }
      },
      {
        patterns: [/cnd\s+municipal/gi, /certid√£o.*municipal/gi, /iss/gi, /prefeitura/gi],
        doc: {
          type: "Regularidade Fiscal",
          description: "Certid√£o Negativa de D√©bitos Municipais (ISS)",
          mandatory: true,
          deadline: "M√°ximo 90 dias da data de emiss√£o"
        }
      },
      {
        patterns: [/fgts/gi, /fundo.*garantia/gi, /caixa\s+econ√¥mica/gi],
        doc: {
          type: "Regularidade Fiscal",
          description: "Certificado de Regularidade do FGTS (CRF)",
          mandatory: true,
          deadline: "M√°ximo 90 dias da data de emiss√£o"
        }
      },
      {
        patterns: [/cndt/gi, /trabalhista/gi, /d√©bitos.*trabalhistas/gi, /justi√ßa.*trabalho/gi],
        doc: {
          type: "Regularidade Trabalhista",
          description: "Certid√£o Negativa de D√©bitos Trabalhistas",
          mandatory: true,
          deadline: "M√°ximo 180 dias da data de emiss√£o"
        }
      },
      {
        patterns: [/balan√ßo/gi, /demonstra√ß√µes.*cont√°beis/gi, /dre/gi, /demonstra√ß√£o.*resultado/gi],
        doc: {
          type: "Qualifica√ß√£o Econ√¥mico-Financeira",
          description: "Balan√ßo patrimonial e demonstra√ß√µes cont√°beis dos √∫ltimos exerc√≠cios",
          mandatory: true,
          notes: "Dos √∫ltimos 3 exerc√≠cios sociais, assinados por contador registrado no CRC"
        }
      },
      {
        patterns: [/atestado.*capacidade/gi, /atestado.*t√©cnica/gi, /comprova√ß√£o.*experi√™ncia/gi],
        doc: {
          type: "Qualifica√ß√£o T√©cnica",
          description: "Atestados de execu√ß√£o de servi√ßos similares ao objeto da licita√ß√£o",
          mandatory: true,
          notes: "M√≠nimo de 3 atestados emitidos por √≥rg√£os p√∫blicos ou empresas privadas"
        }
      },
      {
        patterns: [/crea/gi, /cau/gi, /registro.*profissional/gi, /conselho.*classe/gi],
        doc: {
          type: "Qualifica√ß√£o T√©cnica",
          description: "Registro no CREA, CAU ou conselho profissional competente",
          mandatory: true,
          deadline: "Deve estar em dia com as anuidades"
        }
      },
      {
        patterns: [/iso\s*27001/gi, /seguran√ßa.*informa√ß√£o/gi],
        doc: {
          type: "Certifica√ß√µes",
          description: "Certifica√ß√£o de Sistema de Gest√£o de Seguran√ßa da Informa√ß√£o",
          mandatory: true,
          deadline: "Certificado deve estar vigente",
          notes: "Emitida por organismo acreditado pelo INMETRO"
        }
      },
      {
        patterns: [/iso\s*9001/gi, /gest√£o.*qualidade/gi, /qualidade/gi],
        doc: {
          type: "Certifica√ß√µes",
          description: "Certifica√ß√£o de Sistema de Gest√£o da Qualidade",
          mandatory: false,
          deadline: "Certificado deve estar vigente"
        }
      },
      {
        patterns: [/anatel/gi, /homologa√ß√£o.*anatel/gi, /certifica√ß√£o.*anatel/gi],
        doc: {
          type: "Certifica√ß√µes T√©cnicas",
          description: "Certifica√ß√£o ANATEL para equipamentos de telecomunica√ß√µes",
          mandatory: true,
          notes: "Para equipamentos que emitem radiofrequ√™ncia ou operam em espectro regulamentado"
        }
      },
      {
        patterns: [/inmetro/gi, /certifica√ß√£o.*inmetro/gi, /conformidade/gi],
        doc: {
          type: "Certifica√ß√µes T√©cnicas",
          description: "Certifica√ß√£o de conformidade INMETRO para equipamentos",
          mandatory: true,
          notes: "Conforme regulamenta√ß√£o t√©cnica aplic√°vel ao produto"
        }
      },
      {
        patterns: [/declara√ß√£o.*menor/gi, /trabalho.*menor/gi, /menor.*idade/gi],
        doc: {
          type: "Outros Documentos",
          description: "Declara√ß√£o de que n√£o emprega menor de 18 anos em trabalho noturno, perigoso ou insalubre",
          mandatory: true
        }
      },
      {
        patterns: [/declara√ß√£o.*independente/gi, /elabora√ß√£o.*independente/gi],
        doc: {
          type: "Outros Documentos",
          description: "Declara√ß√£o de que a proposta foi elaborada de forma independente",
          mandatory: true
        }
      }
    ];

    // Buscar documentos no texto
    let foundCount = 0;
    docSections.forEach(section => {
      standardDocs.forEach(({ patterns, doc }) => {
        const found = patterns.some(pattern => pattern.test(section));
        if (found && !documents.some(d => d.description === doc.description)) {
          documents.push({ ...doc });
          foundCount++;
        }
      });
    });

    // Buscar documentos adicionais mencionados no texto
    const additionalDocPatterns = [
      /[-‚Ä¢]\s*([^:\n]*(?:certid√£o|certificado|atestado|declara√ß√£o|comprovante)[^:\n]*)/gi,
      /[-‚Ä¢]\s*([^:\n]*(?:registro|licen√ßa|autoriza√ß√£o|alvar√°)[^:\n]*)/gi,
      /(?:apresentar|entregar|fornecer)\s+([^,\n]*(?:certid√£o|certificado|atestado|declara√ß√£o)[^,\n]*)/gi
    ];

    docSections.forEach(section => {
      additionalDocPatterns.forEach(pattern => {
        let match;
        while ((match = pattern.exec(section)) !== null) {
          const docName = match[1].trim();
          if (docName.length > 15 && docName.length < 120 &&
            !documents.some(d => d.description.toLowerCase().includes(docName.toLowerCase().substring(0, 25)))) {
            documents.push({
              type: "Documento Adicional",
              description: `Documento identificado no edital: ${docName}`,
              mandatory: true
            });
            foundCount++;
          }
        }
      });
    });

    console.log(`‚úÖ Documentos encontrados: ${foundCount}`);
    return documents.slice(0, 30); // Limitar a 30 documentos
  };

  // Extra√ß√£o inteligente de especifica√ß√µes t√©cnicas
  const extractTechnicalSpecs = (text: string): ProductItem[] => {
    const products: ProductItem[] = [];

    console.log('üîß Iniciando extra√ß√£o de especifica√ß√µes t√©cnicas...');
    console.log(`üìÑ Texto para an√°lise: ${text.length} caracteres`);

    // Padr√µes mais robustos para identificar itens
    const itemPatterns = [
      /(?:ITEM\s+(\d+(?:\.\d+)?)\s*[-‚Äì]\s*([^(]+?)\s*\((?:Qtd?:?\s*)?(\d+)(?:\s+(?:unidades?|un|pcs?|pe√ßas?))?\))/gi,
      /(?:LOTE\s+(\d+)\s*[-‚Äì]\s*([^(]+?)\s*\((?:Qtd?:?\s*)?(\d+)(?:\s+(?:unidades?|un|pcs?))?\))/gi,
      /(\d+\.\d+)\s+([^(]+?)\s*\((?:Quantidade:?\s*)?(\d+)(?:\s+(?:unidades?|un|pcs?))?\)/gi,
      /([A-Z√Å√ä√á√ï][A-Za-z√°√™√ß√µ\s]{10,80}?)\s*\((\d+)\s+(?:unidades?|un|pcs?)\)/gi,
      // Padr√µes mais gen√©ricos para capturar itens que podem n√£o seguir o formato padr√£o
      /(\d+\.\d+)\s+([^0-9\n]{10,100}?)\s+(\d+)\s+(?:unidades?|un|pcs?|pe√ßas?)/gi,
      /([A-Z][A-Za-z√°√™√ß√µ\s]{10,100}?)\s+(\d+)\s+(?:unidades?|un|pcs?|pe√ßas?)/gi,
      /(?:Item|Lote)\s+(\d+)\s*[-‚Äì]\s*([^0-9\n]{10,100}?)\s+(\d+)/gi,
      // Padr√£o espec√≠fico para o formato do arquivo de teste
      /ITEM\s+(\d+\.\d+)\s*[-‚Äì]\s*([^(]+?)\s*\(Qtd:\s*(\d+)\s+unidades?\)/gi
    ];

    let itemMatches: Array<{ name: string, quantity: number, context: string, itemNumber?: string }> = [];

    // Extrair itens com contexto
    itemPatterns.forEach((pattern, patternIndex) => {
      console.log(`üîç Testando padr√£o ${patternIndex + 1}:`, pattern.source);
      let match;
      while ((match = pattern.exec(text)) !== null) {
        let name: string, quantity: number, itemNumber: string | undefined;

        console.log(`üîç Padr√£o ${patternIndex + 1} encontrou match:`, match[0]);
        console.log(`üîç Match completo:`, match);

        if (patternIndex >= 3 && patternIndex <= 5) { // Padr√µes mais gen√©ricos
          if (match[1] && match[2] && match[3]) {
            itemNumber = match[1];
            name = match[2].trim();
            quantity = parseInt(match[3]);
          } else if (match[1] && match[2]) {
            name = match[1].trim();
            quantity = parseInt(match[2]);
          } else {
            name = '';
            quantity = 0;
          }
        } else {
          itemNumber = match[1];
          name = match[2]?.trim() || '';
          quantity = parseInt(match[3]) || 0;
        }

        console.log(`üì¶ Item processado: "${name}" - Qtd: ${quantity}`);

        if (name && name.length > 5 && quantity > 0 && quantity < 10000) {
          // Extrair contexto ao redor do item (1000 caracteres)
          const startIndex = Math.max(0, match.index - 500);
          const endIndex = Math.min(text.length, match.index + 2000);
          const context = text.substring(startIndex, endIndex);

          itemMatches.push({ name, quantity, context, itemNumber });
          console.log(`‚úÖ Item adicionado: "${name}"`);
        } else {
          console.log(`‚ùå Item rejeitado: "${name}" - Qtd: ${quantity}`);
        }
      }
    });

    console.log(`üì¶ Itens identificados: ${itemMatches.length}`);

    // Processar cada item encontrado
    itemMatches.forEach(({ name, quantity, context, itemNumber }) => {
      // Extrair especifica√ß√µes do contexto
      const specs = extractSpecsFromContext(context, name);

      // Determinar categoria e valor estimado
      const category = categorizeProduct(name);
      const estimatedValue = estimateProductValue(name, specs, quantity);
      const priority = determinePriority(name, category);
      const riskLevel = assessRisk(name, specs);

      products.push({
        item: name,
        description: `${name} conforme especifica√ß√µes t√©cnicas detalhadas no edital${itemNumber ? ` (Item ${itemNumber})` : ''}`,
        quantity: quantity,
        unit: "unidade",
        estimatedValue: estimatedValue,
        specifications: specs,
        category: category,
        priority: priority,
        complianceLevel: 'Total',
        riskLevel: riskLevel,
        technicalJustification: generateTechnicalJustification(name, specs),
        marketAnalysis: generateMarketAnalysis(name, category),
        alternativeOptions: generateAlternatives(name, category)
      });
    });

    console.log(`‚úÖ Produtos processados: ${products.length}`);
    console.log(`üì¶ Produtos encontrados:`, products.map(p => ({ item: p.item, quantity: p.quantity })));
    return products.slice(0, 25); // Limitar a 25 produtos
  };

  // Extrair especifica√ß√µes do contexto
  const extractSpecsFromContext = (context: string, itemName: string): string[] => {
    const specs: string[] = [];

    // Padr√µes para especifica√ß√µes t√©cnicas
    const specPatterns = [
      /[-‚Ä¢]\s*([^:\n]+):\s*([^\n]+)/g,
      /[-‚Ä¢]\s*([A-Za-z][^:\n]{5,80})/g,
      /(?:Processador|CPU|Processor):\s*([^\n]+)/gi,
      /(?:Mem√≥ria|Memory|RAM):\s*([^\n]+)/gi,
      /(?:Armazenamento|Storage|Disco|HD|SSD):\s*([^\n]+)/gi,
      /(?:Rede|Network|Ethernet|Conectividade):\s*([^\n]+)/gi,
      /(?:Fonte|Power|Alimenta√ß√£o):\s*([^\n]+)/gi,
      /(?:Garantia|Warranty):\s*([^\n]+)/gi,
      /(?:Sistema|OS|Operacional):\s*([^\n]+)/gi,
      /(?:Monitor|Display|Tela):\s*([^\n]+)/gi,
      /(?:Placa|Video|Gr√°fica):\s*([^\n]+)/gi
    ];

    specPatterns.forEach(pattern => {
      let match;
      while ((match = pattern.exec(context)) !== null) {
        let spec = '';
        if (match[2]) {
          spec = `${match[1].trim()}: ${match[2].trim()}`;
        } else {
          spec = match[1].trim();
        }

        // Filtrar especifica√ß√µes v√°lidas
        if (spec.length > 15 && spec.length < 250 &&
          !spec.toLowerCase().includes(itemName.toLowerCase().substring(0, 10)) &&
          !specs.some(s => s.toLowerCase().includes(spec.toLowerCase().substring(0, 30)))) {
          specs.push(spec);
        }
      }
    });

    return specs.slice(0, 20); // Limitar a 20 especifica√ß√µes por produto
  };

  // Categorizar produto de forma mais inteligente
  const categorizeProduct = (name: string): string => {
    const nameLower = name.toLowerCase();

    if (nameLower.includes('servidor') || nameLower.includes('server') || nameLower.includes('blade'))
      return 'Infraestrutura Computacional';
    if (nameLower.includes('storage') || nameLower.includes('san') || nameLower.includes('nas') || nameLower.includes('backup'))
      return 'Armazenamento';
    if (nameLower.includes('switch') || nameLower.includes('roteador') || nameLower.includes('router') ||
      nameLower.includes('firewall') || nameLower.includes('access point') || nameLower.includes('wifi'))
      return 'Rede e Conectividade';
    if (nameLower.includes('workstation') || nameLower.includes('desktop') || nameLower.includes('computador'))
      return 'Equipamentos de Usu√°rio';
    if (nameLower.includes('notebook') || nameLower.includes('laptop') || nameLower.includes('tablet'))
      return 'Equipamentos M√≥veis';
    if (nameLower.includes('impressora') || nameLower.includes('scanner') || nameLower.includes('multifuncional'))
      return 'Perif√©ricos';
    if (nameLower.includes('monitor') || nameLower.includes('display') || nameLower.includes('projetor'))
      return 'Dispositivos de Exibi√ß√£o';
    if (nameLower.includes('software') || nameLower.includes('licen√ßa') || nameLower.includes('sistema'))
      return 'Software e Licen√ßas';

    return 'Outros Equipamentos';
  };

  // Estimar valor do produto de forma mais precisa
  const estimateProductValue = (name: string, specs: string[], quantity: number): number => {
    const nameLower = name.toLowerCase();
    const specsText = specs.join(' ').toLowerCase();
    let baseValue = 5000;

    // Valores base por categoria
    if (nameLower.includes('servidor') || nameLower.includes('server')) {
      baseValue = nameLower.includes('blade') ? 120000 : (quantity > 10 ? 45000 : 85000);
    } else if (nameLower.includes('storage') || nameLower.includes('san')) {
      baseValue = 450000;
    } else if (nameLower.includes('switch')) {
      baseValue = nameLower.includes('core') || specsText.includes('10gbe') ? 180000 : 35000;
    } else if (nameLower.includes('firewall')) {
      baseValue = specsText.includes('utm') || specsText.includes('next generation') ? 120000 : 80000;
    } else if (nameLower.includes('workstation')) {
      baseValue = specsText.includes('xeon') || specsText.includes('quadro') ? 18000 : 12000;
    } else if (nameLower.includes('notebook')) {
      baseValue = specsText.includes('i7') || specsText.includes('ryzen 7') ? 6000 : 4500;
    } else if (nameLower.includes('impressora')) {
      baseValue = specsText.includes('laser') ? 18000 : 12000;
    }

    // Ajustes baseados nas especifica√ß√µes
    if (specsText.includes('xeon') || specsText.includes('epyc')) baseValue *= 1.6;
    if (specsText.includes('ssd') && specsText.includes('nvme')) baseValue *= 1.3;
    if (specsText.includes('10gbe') || specsText.includes('25gbe') || specsText.includes('40gbe')) baseValue *= 1.4;
    if (specsText.includes('redundante') || specsText.includes('redundancy')) baseValue *= 1.2;
    if (specsText.includes('enterprise') || specsText.includes('datacenter')) baseValue *= 1.3;

    return Math.round(baseValue);
  };

  // Determinar prioridade de forma mais inteligente
  const determinePriority = (name: string, category: string): 'Cr√≠tico' | 'Importante' | 'Desej√°vel' => {
    const nameLower = name.toLowerCase();

    if (nameLower.includes('servidor') || nameLower.includes('storage') ||
      nameLower.includes('firewall') || nameLower.includes('core')) {
      return 'Cr√≠tico';
    }
    if (category === 'Rede e Conectividade' || category === 'Infraestrutura Computacional' ||
      nameLower.includes('switch') || nameLower.includes('backup')) {
      return 'Importante';
    }
    return 'Desej√°vel';
  };

  // Avaliar risco de forma mais detalhada
  const assessRisk = (name: string, specs: string[]): 'Baixo' | 'M√©dio' | 'Alto' => {
    const specsText = specs.join(' ').toLowerCase();
    const nameLower = name.toLowerCase();

    // Alto risco
    if (specsText.includes('espec√≠fico') || specsText.includes('propriet√°rio') ||
      specsText.includes('exclusivo') || specs.length < 3) return 'Alto';

    // M√©dio risco
    if (specsText.includes('certifica√ß√£o') || specsText.includes('homologa√ß√£o') ||
      nameLower.includes('servidor') || nameLower.includes('storage') ||
      specsText.includes('enterprise')) return 'M√©dio';

    return 'Baixo';
  };

  // Gerar justificativa t√©cnica mais detalhada
  const generateTechnicalJustification = (name: string, specs: string[]): string => {
    const hasDetailedSpecs = specs.length > 5;
    const category = categorizeProduct(name);

    return `Especifica√ß√µes t√©cnicas para ${name} extra√≠das diretamente do edital. ${hasDetailedSpecs ?
      `Identificadas ${specs.length} especifica√ß√µes t√©cnicas detalhadas incluindo requisitos de performance, conectividade, compatibilidade e certifica√ß√µes necess√°rias.` :
      'Equipamento essencial para o funcionamento da infraestrutura conforme descrito no documento.'
      } Categoria: ${category}.`;
  };

  // Gerar an√°lise de mercado mais espec√≠fica
  const generateMarketAnalysis = (name: string, category: string): string => {
    const nameLower = name.toLowerCase();
    let marketInfo = '';

    if (nameLower.includes('servidor')) {
      marketInfo = 'Mercado de servidores aquecido com boa disponibilidade de fornecedores nacionais e internacionais. Dell, HPE e Lenovo lideram o segmento.';
    } else if (nameLower.includes('storage')) {
      marketInfo = 'Mercado de storage em crescimento com foco em solu√ß√µes all-flash. NetApp, Dell EMC e HPE s√£o os principais players.';
    } else if (nameLower.includes('switch')) {
      marketInfo = 'Mercado de switching dominado por Cisco, com crescimento de Arista e Juniper no segmento datacenter.';
    } else {
      marketInfo = `Categoria ${category} possui boa disponibilidade no mercado nacional com diversos fornecedores homologados.`;
    }

    return `${marketInfo} Recomenda-se verificar prazos de entrega (60-120 dias t√≠picos) e condi√ß√µes comerciais espec√≠ficas.`;
  };

  // Gerar alternativas mais espec√≠ficas
  const generateAlternatives = (name: string, category: string): string[] => {
    const nameLower = name.toLowerCase();
    const alternatives = [
      "Verificar modelos equivalentes de outros fabricantes homologados no CATSER",
      "Considerar configura√ß√µes que atendam aos requisitos m√≠nimos especificados"
    ];

    if (nameLower.includes('servidor')) {
      alternatives.push("Avaliar servidores rack como alternativa a blade servers");
      alternatives.push("Considerar processadores de gera√ß√£o anterior para redu√ß√£o de custos");
    } else if (nameLower.includes('storage')) {
      alternatives.push("Avaliar storage h√≠brido (SSD+HDD) para redu√ß√£o de custos");
      alternatives.push("Considerar solu√ß√µes de software-defined storage");
    } else if (nameLower.includes('switch')) {
      alternatives.push("Avaliar switches de menor capacidade com possibilidade de upgrade");
      alternatives.push("Considerar arquitetura leaf-spine para maior flexibilidade");
    }

    alternatives.push("Analisar possibilidade de parcerias estrat√©gicas com integradores locais");

    return alternatives;
  };

  // An√°lise inteligente do texto extra√≠do
  const analyzeExtractedText = (text: string, analysisType: string): AnalysisResult => {
    console.log(`üî¨ Iniciando an√°lise: ${text.length} caracteres, tipo: ${analysisType}`);
    const startTime = Date.now();

    // Usar as novas fun√ß√µes de extra√ß√£o baseadas no tipo de an√°lise
    let products: ProductItem[] = [];
    let documents: DocumentRequirement[] = [];

    if (analysisType === 'documentacao') {
      documents = extractDocuments(text);
    } else if (analysisType === 'tdr' || analysisType === 'produtos') {
      products = extractTechnicalSpecs(text);
    } else {
      // An√°lise geral - extrair ambos
      products = extractTechnicalSpecs(text);
      documents = extractDocuments(text);
    }

    // Extrair valores monet√°rios
    const extractValues = (text: string): string[] => {
      const values: string[] = [];
      const valuePatterns = [/R\$\s*([\d.,]+)/gi, /(?:valor|total).*?R\$\s*([\d.,]+)/gi];
      valuePatterns.forEach(pattern => {
        let match;
        while ((match = pattern.exec(text)) !== null) {
          const value = match[1] || match[0];
          if (value && !values.some(v => v.includes(value))) {
            values.push(`Valor identificado: R$ ${value}`);
          }
        }
      });
      return values;
    };

    // Extrair prazos
    const extractDeadlines = (text: string): string[] => {
      const deadlines: string[] = [];
      const deadlinePatterns = [
        /(?:entrega|prazo|instala√ß√£o).*?(\d{1,2}\/\d{1,2}\/\d{4})/gi,
        /(?:entrega|prazo).*?(\d+)\s*dias?\s*(?:√∫teis?)?/gi
      ];
      deadlinePatterns.forEach(pattern => {
        let match;
        while ((match = pattern.exec(text)) !== null) {
          const deadline = match[0].trim();
          if (deadline && !deadlines.some(d => d.includes(deadline))) {
            deadlines.push(deadline);
          }
        }
      });
      return deadlines;
    };

    // Executar an√°lise
    const values = extractValues(text);
    const deadlines = extractDeadlines(text);

    // Calcular confian√ßa
    let confidence = 70;
    if (products.length > 0) confidence += 15;
    if (values.length > 0) confidence += 10;
    if (deadlines.length > 0) confidence += 5;

    const processingTime = (Date.now() - startTime) / 1000;

    console.log(`‚úÖ An√°lise conclu√≠da: ${products.length} produtos, ${values.length} valores, ${deadlines.length} prazos`);

    return {
      id: `analysis-${Date.now()}`,
      fileName: selectedFile!.name,
      analysisType: analysisType,
      analysisDate: new Date().toISOString(),
      confidence: Math.min(confidence, 99),
      processingTime: Math.round(processingTime * 10) / 10,
      summary: `An√°lise realizada do arquivo "${selectedFile!.name}". Identificados ${products.length} itens t√©cnicos com especifica√ß√µes extra√≠das do documento real.`,
      keyPoints: [
        `${products.length} produtos identificados automaticamente`,
        `An√°lise baseada em ${text.length} caracteres de texto real`,
        `Confian√ßa da extra√ß√£o: ${confidence}%`,
        `Tempo de processamento: ${processingTime}s`
      ],
      requirements: [
        "Equipamentos conforme especifica√ß√µes extra√≠das do edital",
        "Certifica√ß√µes t√©cnicas obrigat√≥rias",
        "Garantia e suporte t√©cnico conforme especificado"
      ],
      deadlines: deadlines.length > 0 ? deadlines : ["Prazos conforme documento original"],
      values: values.length > 0 ? values : ["Valores conforme or√ßamento do edital"],
      risks: [
        "Especifica√ß√µes podem limitar fornecedores",
        "Prazos de entrega desafiadores",
        "Necessidade de certifica√ß√µes espec√≠ficas"
      ],
      opportunities: [
        "Fornecimento de equipamentos de qualidade",
        "Relacionamento de longo prazo",
        "Contratos de manuten√ß√£o futuros"
      ],
      recommendations: [
        "Verificar disponibilidade dos itens identificados",
        "Confirmar certifica√ß√µes necess√°rias",
        "Preparar documenta√ß√£o t√©cnica completa"
      ],
      products: products
    };
  };

// Fun√ß√£o principal de an√°lise
const handleAnalyze = async () => {
  if (!selectedFile) {
    console.log('‚ùå Nenhum arquivo selecionado');
    return;
  }
  
  console.log('üöÄ Iniciando an√°lise do arquivo:', selectedFile.name);
  setIsAnalyzing(true);

  try {
    console.log('üìÑ Extraindo texto do arquivo...');
    const extractedText = await extractTextFromFile(selectedFile);
    console.log('‚úÖ Texto extra√≠do:', extractedText.length, 'caracteres');
    
    console.log('üî¨ Iniciando an√°lise do texto...');
    const result = analyzeExtractedText(extractedText, selectedAnalysisType);
    console.log('‚úÖ An√°lise conclu√≠da:', result);
    console.log('üì¶ Produtos encontrados:', result.products?.length || 0);
    
    console.log('üíæ Salvando resultado no estado...');
    setAnalysisResult(result);
    console.log('‚úÖ Resultado salvo no estado');
    
  } catch (error) {
    console.error('‚ùå Erro na an√°lise:', error);
    alert('Erro ao analisar o arquivo. Verifique se √© um PDF ou DOCX v√°lido.');
  } finally {
    setIsAnalyzing(false);
    console.log('üèÅ An√°lise finalizada');
  }
};

// Fun√ß√£o para salvar resultado
const handleSave = () => {
  if (!analysisResult) return;
  const dataStr = JSON.stringify(analysisResult, null, 2);
  const dataBlob = new Blob([dataStr], { type: 'application/json' });
  const url = URL.createObjectURL(dataBlob);
  const link = document.createElement('a');
  link.href = url;
  link.download = `analise-${analysisResult.fileName}-${new Date().toISOString().split('T')[0]}.json`;
  link.click();
  URL.revokeObjectURL(url);
};

// Fun√ß√£o para imprimir PDF
const handlePrintPDF = () => {
  if (!analysisResult) return;
  const printWindow = window.open('', '_blank');
  if (!printWindow) return;

  const printContent = `
      <!DOCTYPE html>
      <html>
        <head>
          <title>An√°lise de Edital - ${analysisResult.fileName}</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 20px; line-height: 1.6; }
            .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #333; padding-bottom: 20px; }
            .section { margin-bottom: 25px; }
            .section h3 { color: #333; border-bottom: 1px solid #ccc; padding-bottom: 5px; }
            .list-item { margin: 5px 0; padding-left: 15px; }
            .confidence { font-size: 18px; font-weight: bold; color: #4caf50; }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>An√°lise de Edital com IA</h1>
            <p><strong>Arquivo:</strong> ${analysisResult.fileName}</p>
            <p><strong>Tipo:</strong> ${analysisTypes.find(t => t.id === analysisResult.analysisType)?.title}</p>
            <p><strong>Data:</strong> ${new Date(analysisResult.analysisDate).toLocaleString('pt-BR')}</p>
            <p><strong>Confian√ßa:</strong> <span class="confidence">${analysisResult.confidence}%</span></p>
          </div>
          
          <div class="section">
            <h3>Resumo</h3>
            <p>${analysisResult.summary}</p>
          </div>
          
          <div class="section">
            <h3>Pontos-Chave</h3>
            ${analysisResult.keyPoints.map(point => `<div class="list-item">‚Ä¢ ${point}</div>`).join('')}
          </div>
          
          ${analysisResult.products && analysisResult.products.length > 0 ? `
          <div class="section">
            <h3>Produtos Identificados (${analysisResult.products.length})</h3>
            ${analysisResult.products.map(product => `
              <div style="margin: 15px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px;">
                <h4>${product.item} (${product.quantity} ${product.unit})</h4>
                <p><strong>Valor estimado:</strong> ${new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' }).format(product.estimatedValue)}</p>
                <p><strong>Categoria:</strong> ${product.category}</p>
                <div>
                  <strong>Especifica√ß√µes:</strong>
                  <ul>${product.specifications.map(spec => `<li>${spec}</li>`).join('')}</ul>
                </div>
              </div>
            `).join('')}
          </div>
          ` : ''}
          
          <div style="margin-top: 40px; text-align: center; font-size: 12px; color: #666;">
            <p>Relat√≥rio gerado pelo Analisador de Editais com IA</p>
            <p>Data: ${new Date().toLocaleString('pt-BR')}</p>
          </div>
        </body>
      </html>
    `;

  printWindow.document.write(printContent);
  printWindow.document.close();
  printWindow.focus();
  printWindow.print();
};
return (
  <div className="min-h-screen bg-gray-900 text-white p-6">
    <div className="max-w-4xl mx-auto space-y-8">
      {/* Header */}
      <div className="text-center space-y-4">
        <h1 className="text-4xl font-bold text-white">
          Analisador de Editais e TDR com IA
        </h1>
        <p className="text-gray-300 text-lg">
          Carregue um arquivo para an√°lise inteligente e direcionada.
        </p>
      </div>

      {/* File Upload */}
      <Card className="bg-gray-800 border-gray-700">
        <CardContent className="p-8">
          <div
            className={`border-2 border-dashed rounded-lg p-12 text-center transition-colors ${isDragOver ? 'border-blue-400 bg-blue-900/20' : 'border-gray-600 hover:border-gray-500'
              }`}
            onDragOver={handleDragOver}
            onDragLeave={handleDragLeave}
            onDrop={handleDrop}
            onClick={() => fileInputRef.current?.click()}
          >
            <input
              ref={fileInputRef}
              type="file"
              accept=".pdf,.docx,.doc"
              onChange={handleFileInputChange}
              className="hidden"
            />

            <div className="space-y-4">
              <div className="mx-auto w-16 h-16 bg-gray-700 rounded-full flex items-center justify-center">
                <Upload className="h-8 w-8 text-gray-400" />
              </div>

              <div className="space-y-2">
                <p className="text-lg font-medium">Arraste e solte o arquivo aqui</p>
                <p className="text-gray-400">ou clique para selecionar (.pdf, .docx)</p>
              </div>

              {selectedFile && (
                <div className="mt-4 p-3 bg-green-900/20 border border-green-600 rounded-lg">
                  <div className="flex items-center gap-2">
                    <FileText className="h-5 w-5 text-green-400" />
                    <span className="text-green-400 font-medium">{selectedFile.name}</span>
                  </div>
                  <p className="text-sm text-green-300 mt-1">
                    {(selectedFile.size / 1024 / 1024).toFixed(2)} MB
                  </p>
                </div>
              )}
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Analysis Types */}
      <div className="space-y-4">
        <h2 className="text-xl font-semibold text-center">Selecione o Tipo de An√°lise</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          {analysisTypes.map((type) => (
            <Card
              key={type.id}
              className={`cursor-pointer transition-all ${selectedAnalysisType === type.id
                ? 'bg-blue-600 border-blue-500'
                : 'bg-gray-800 border-gray-700 hover:bg-gray-700'
                }`}
              onClick={() => setSelectedAnalysisType(type.id)}
            >
              <CardContent className="p-6 text-center space-y-3">
                <div className="mx-auto w-12 h-12 bg-gray-700 rounded-full flex items-center justify-center">
                  {type.icon}
                </div>
                <div>
                  <h3 className="font-semibold text-lg">{type.title}</h3>
                  <p className="text-sm text-gray-300 mt-1">{type.description}</p>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>

      {/* Analyze Button */}
      <div className="text-center space-y-4">
        <Button
          onClick={handleAnalyze}
          disabled={!selectedFile || isAnalyzing}
          className="bg-blue-600 hover:bg-blue-700 text-white px-8 py-3 text-lg font-semibold"
        >
          {isAnalyzing ? (
            <div className="flex items-center gap-2">
              <Loader2 className="h-5 w-5 animate-spin" />
              Analisando...
            </div>
          ) : (
            <div className="flex items-center gap-2">
              <Brain className="h-5 w-5" />
              Analisar Arquivo
            </div>
          )}
        </Button>
        
        {/* Bot√£o de teste para verificar se a interface funciona */}
        <div>
          <Button
            onClick={() => {
              console.log('üß™ Testando interface com dados simulados...');
              const testResult: AnalysisResult = {
                id: `test-${Date.now()}`,
                fileName: 'teste.pdf',
                analysisType: 'tdr',
                analysisDate: new Date().toISOString(),
                confidence: 95,
                processingTime: 1.2,
                summary: 'Teste de an√°lise com dados simulados para verificar se a interface est√° funcionando corretamente.',
                keyPoints: [
                  '3 produtos identificados automaticamente',
                  'An√°lise baseada em dados de teste',
                  'Confian√ßa da extra√ß√£o: 95%',
                  'Tempo de processamento: 1.2s'
                ],
                requirements: [
                  "Equipamentos conforme especifica√ß√µes",
                  "Certifica√ß√µes t√©cnicas obrigat√≥rias",
                  "Garantia e suporte t√©cnico"
                ],
                deadlines: ["Entrega em 30 dias √∫teis"],
                values: ["Valor total: R$ 150.000,00"],
                risks: [
                  "Especifica√ß√µes podem limitar fornecedores",
                  "Prazos de entrega desafiadores"
                ],
                opportunities: [
                  "Fornecimento de equipamentos de qualidade",
                  "Relacionamento de longo prazo"
                ],
                recommendations: [
                  "Verificar disponibilidade dos itens",
                  "Confirmar certifica√ß√µes necess√°rias"
                ],
                products: [
                  {
                    item: "Servidor Dell PowerEdge R750",
                    description: "Servidor de alta performance para virtualiza√ß√£o",
                    quantity: 2,
                    unit: "unidade",
                    estimatedValue: 45000,
                    specifications: [
                      "Processador Intel Xeon Gold 6338",
                      "128GB RAM DDR4",
                      "4x 1.92TB SSD NVMe",
                      "Redund√¢ncia de fonte de alimenta√ß√£o"
                    ],
                    category: "Servidores",
                    priority: "Cr√≠tico",
                    complianceLevel: "Total",
                    riskLevel: "Baixo",
                    technicalJustification: "Servidor enterprise com especifica√ß√µes superiores √†s solicitadas",
                    marketAnalysis: "Dell √© l√≠der no mercado de servidores enterprise",
                    alternativeOptions: ["HP ProLiant DL380", "Lenovo ThinkSystem SR650"]
                  },
                  {
                    item: "Switch Cisco Catalyst 9300",
                    description: "Switch de rede enterprise com PoE",
                    quantity: 4,
                    unit: "unidade",
                    estimatedValue: 12000,
                    specifications: [
                      "48 portas Gigabit Ethernet",
                      "PoE+ em todas as portas",
                      "Stacking de at√© 8 unidades",
                      "Gerenciamento via SNMP"
                    ],
                    category: "Redes",
                    priority: "Importante",
                    complianceLevel: "Total",
                    riskLevel: "M√©dio",
                    technicalJustification: "Switch enterprise com recursos avan√ßados",
                    marketAnalysis: "Cisco √© refer√™ncia em switches enterprise",
                    alternativeOptions: ["HP Aruba 2930F", "Juniper EX4300"]
                  },
                  {
                    item: "Storage NAS Synology RS4021xs+",
                    description: "Sistema de armazenamento em rede",
                    quantity: 1,
                    unit: "unidade",
                    estimatedValue: 25000,
                    specifications: [
                      "12 bays para discos 3.5\"",
                      "Suporte a SSD cache",
                      "RAID 6 configur√°vel",
                      "Backup autom√°tico"
                    ],
                    category: "Storage",
                    priority: "Importante",
                    complianceLevel: "Total",
                    riskLevel: "Baixo",
                    technicalJustification: "Storage enterprise com alta confiabilidade",
                    marketAnalysis: "Synology √© l√≠der em NAS enterprise",
                    alternativeOptions: ["QNAP TS-h2490FU", "NetApp FAS"]
                  }
                ]
              };
              console.log('üß™ Dados de teste criados:', testResult);
              setAnalysisResult(testResult);
              console.log('‚úÖ Resultado de teste salvo no estado');
            }}
            className="bg-green-600 hover:bg-green-700 text-white px-6 py-2 text-sm"
          >
            üß™ Testar Interface
          </Button>
        </div>
      </div>
      {/* Results */}
      {analysisResult && (
        <div ref={resultRef} className="space-y-6">
          <Separator className="bg-gray-700" />

          {/* Results Header */}
          <div className="flex justify-between items-center">
            <div>
              <h2 className="text-2xl font-bold text-white">Resultado da An√°lise</h2>
              <p className="text-gray-300">
                An√°lise conclu√≠da em {analysisResult.processingTime}s com {analysisResult.confidence}% de confian√ßa
              </p>
            </div>
            <div className="flex gap-2">
              <Button onClick={handleSave} variant="outline" className="border-gray-600 text-gray-300 hover:bg-gray-700">
                <Save className="h-4 w-4 mr-2" />
                Salvar
              </Button>
              <Button onClick={handlePrintPDF} variant="outline" className="border-gray-600 text-gray-300 hover:bg-gray-700">
                <Printer className="h-4 w-4 mr-2" />
                Imprimir PDF
              </Button>
            </div>
          </div>

          {/* Analysis Info */}
          <Card className="bg-gray-800 border-gray-700">
            <CardHeader>
              <CardTitle className="text-white flex items-center gap-2">
                <FileText className="h-5 w-5" />
                Informa√ß√µes da An√°lise
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <p className="text-sm text-gray-400">Arquivo</p>
                  <p className="text-white font-medium">{analysisResult.fileName}</p>
                </div>
                <div>
                  <p className="text-sm text-gray-400">Tipo de An√°lise</p>
                  <Badge className="bg-blue-600 text-white">
                    {analysisTypes.find(t => t.id === analysisResult.analysisType)?.title}
                  </Badge>
                </div>
                <div>
                  <p className="text-sm text-gray-400">Data da An√°lise</p>
                  <p className="text-white font-medium">
                    {new Date(analysisResult.analysisDate).toLocaleString('pt-BR')}
                  </p>
                </div>
              </div>
              <div className="flex items-center gap-4">
                <div className="flex items-center gap-2">
                  <TrendingUp className="h-4 w-4 text-green-400" />
                  <span className="text-sm text-gray-400">Confian√ßa:</span>
                  <span className="text-green-400 font-bold">{analysisResult.confidence}%</span>
                </div>
                <div className="flex items-center gap-2">
                  <Clock className="h-4 w-4 text-blue-400" />
                  <span className="text-sm text-gray-400">Tempo:</span>
                  <span className="text-blue-400 font-medium">{analysisResult.processingTime}s</span>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Summary */}
          <Card className="bg-gray-800 border-gray-700">
            <CardHeader>
              <CardTitle className="text-white">Resumo Executivo</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-gray-300 leading-relaxed">{analysisResult.summary}</p>
            </CardContent>
          </Card>

          {/* Key Points and Requirements */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Card className="bg-gray-800 border-gray-700">
              <CardHeader>
                <CardTitle className="text-white flex items-center gap-2">
                  <Target className="h-5 w-5" />
                  Pontos-Chave
                </CardTitle>
              </CardHeader>
              <CardContent>
                <ul className="space-y-2">
                  {analysisResult.keyPoints.map((point, index) => (
                    <li key={index} className="text-gray-300 flex items-start gap-2">
                      <span className="text-blue-400 mt-1">‚Ä¢</span>
                      {point}
                    </li>
                  ))}
                </ul>
              </CardContent>
            </Card>

            <Card className="bg-gray-800 border-gray-700">
              <CardHeader>
                <CardTitle className="text-white flex items-center gap-2">
                  <CheckCircle className="h-5 w-5" />
                  Requisitos
                </CardTitle>
              </CardHeader>
              <CardContent>
                <ul className="space-y-2">
                  {analysisResult.requirements.map((req, index) => (
                    <li key={index} className="text-gray-300 flex items-start gap-2">
                      <span className="text-green-400 mt-1">‚Ä¢</span>
                      {req}
                    </li>
                  ))}
                </ul>
              </CardContent>
            </Card>
          </div>
          {/* Products Section */}
          {(() => {
            console.log('üîç Verificando produtos para renderiza√ß√£o:', {
              hasProducts: !!analysisResult.products,
              productsLength: analysisResult.products?.length || 0,
              products: analysisResult.products
            });
            return analysisResult.products && analysisResult.products.length > 0;
          })() && (
            <Card className="bg-gray-800 border-gray-700">
              <CardHeader>
                <CardTitle className="text-white flex items-center gap-2">
                  <Award className="h-5 w-5" />
                  Produtos Identificados ({analysisResult.products?.length || 0})
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {analysisResult.products?.map((product, index) => (
                    <div key={index} className="bg-gray-700 p-4 rounded-lg border border-gray-600">
                      <div className="flex justify-between items-start mb-3">
                        <div className="flex-1">
                          <div className="flex items-center gap-3 mb-2">
                            <h5 className="font-bold text-white text-lg">{product.item}</h5>
                            {product.priority && (
                              <Badge className={
                                product.priority === 'Cr√≠tico' ? 'bg-red-600 text-white' :
                                  product.priority === 'Importante' ? 'bg-orange-600 text-white' :
                                    'bg-blue-600 text-white'
                              }>
                                {product.priority}
                              </Badge>
                            )}
                          </div>
                          <p className="text-gray-300 mb-2">{product.description}</p>
                          {product.category && (
                            <p className="text-blue-400 text-sm font-medium">Categoria: {product.category}</p>
                          )}
                        </div>
                        <div className="text-right ml-4">
                          <p className="text-green-400 font-bold text-xl">
                            {new Intl.NumberFormat('pt-BR', {
                              style: 'currency',
                              currency: 'BRL'
                            }).format(product.estimatedValue)}
                          </p>
                          <p className="text-gray-400">
                            {product.quantity} {product.unit}
                          </p>
                        </div>
                      </div>

                      {/* Specifications */}
                      <div className="mb-4">
                        <h6 className="text-blue-400 font-semibold mb-3">üìã Especifica√ß√µes T√©cnicas:</h6>
                        <div className="bg-gray-800 p-4 rounded-lg">
                          <ul className="space-y-2">
                            {product.specifications.map((spec, specIndex) => (
                              <li key={specIndex} className="text-gray-300 flex items-start gap-3">
                                <CheckCircle className="h-4 w-4 text-green-400 mt-0.5 flex-shrink-0" />
                                <span className="text-sm">{spec}</span>
                              </li>
                            ))}
                          </ul>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}

          {/* Risks and Opportunities */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Card className="bg-gray-800 border-gray-700">
              <CardHeader>
                <CardTitle className="text-white flex items-center gap-2">
                  <AlertTriangle className="h-5 w-5 text-red-400" />
                  Riscos Identificados
                </CardTitle>
              </CardHeader>
              <CardContent>
                <ul className="space-y-2">
                  {analysisResult.risks.map((risk, index) => (
                    <li key={index} className="text-gray-300 flex items-start gap-2">
                      <span className="text-red-400 mt-1">‚Ä¢</span>
                      {risk}
                    </li>
                  ))}
                </ul>
              </CardContent>
            </Card>

            <Card className="bg-gray-800 border-gray-700">
              <CardHeader>
                <CardTitle className="text-white flex items-center gap-2">
                  <TrendingUp className="h-5 w-5 text-green-400" />
                  Oportunidades
                </CardTitle>
              </CardHeader>
              <CardContent>
                <ul className="space-y-2">
                  {analysisResult.opportunities.map((opportunity, index) => (
                    <li key={index} className="text-gray-300 flex items-start gap-2">
                      <span className="text-green-400 mt-1">‚Ä¢</span>
                      {opportunity}
                    </li>
                  ))}
                </ul>
              </CardContent>
            </Card>
          </div>

          {/* Recommendations */}
          <Card className="bg-gray-800 border-gray-700">
            <CardHeader>
              <CardTitle className="text-white flex items-center gap-2">
                <Award className="h-5 w-5" />
                Recomenda√ß√µes
              </CardTitle>
            </CardHeader>
            <CardContent>
              <ul className="space-y-3">
                {analysisResult.recommendations.map((recommendation, index) => (
                  <li key={index} className="text-gray-300 flex items-start gap-2">
                    <span className="text-purple-400 mt-1">‚Ä¢</span>
                    {recommendation}
                  </li>
                ))}
              </ul>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  </div>
);
};

export default EditalAnalyzer;